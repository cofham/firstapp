<?xml version="1.0" encoding="UTF-8"?>
<web-app
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_1.xsd"
    version="3.1">

	<!-- 서블릿 컨테이너의 리스너 클래스로 ContextLoaderListener를 정의  -->
	<!-- ContextLoaderListener의 기본 동작은 웹 애플리케이션 안에 저장되는 
	/WEB-INF/applicationContext.xml을 사용해 애플리케이션 컨텍스트를 생성-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <context-param>
        <param-name>contextClass</param-name>
        <param-value>
            org.springframework.web.context.support.AnnotationConfigWebApplicationContext
        </param-value>
    </context-param>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>example.config.AppConfig</param-value>
    </context-param>

	<!-- CharacterEncodingFilter 클래스를 서블릿 컨테이너에 등록 -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- 서블릿 필터의 encoding 파라미터에 요청 파라미터의 문자 인코딩을 지정 -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <!-- 요청 및 응답의 문자 인코딩을 덮어쓰기 할지를 지정 -->
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!-- CharacterEncodingFilter를 적용하는 요청 URL 패턴을 지정 -->
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!--index.jsp가 views안에 있어도 에러 발생하지않게함.  -->
	<welcome-file-list>
    	<welcome-file>/WEB-INF/index.jsp</welcome-file>
	</welcome-file-list>
    
    <!-- DispatcherServlet 클래스를 서블릿 컨테이너에 등록
    	'servlet-name'-servlet.xml (app-servlet.xml) 을 사용해 애플리케이션 컨텍스트를 만든다. -->
    <servlet>
        <servlet-name>app</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    	<!-- 서블릿 컨테이너의 contextClass 파라미터에 AnnotationConfigWebApplicationContext 클래스 지정 -->
        <init-param>
            <param-name>contextClass</param-name>
            <param-value>
                org.springframework.web.context.support.AnnotationConfigWebApplicationContext
            </param-value>
        </init-param>
        <!-- 서블릿 contextConfigLocation 파라미터에 작성한 설정 클래스를 지정-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>example.config.WebMvcConfig</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

	<!-- DispatcherServlet을 사용해 요청을 처리하는 URL 패턴을 설정 -->
    <servlet-mapping>
        <servlet-name>app</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <jsp-config>
        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <!-- JSP파일의 문자 코드를 지정 -->
            <page-encoding>UTF-8</page-encoding>
            <!-- 모든 JSP 파일 앞에 포함시킬 공통 JSP 파일을 지정 -->
            <include-prelude>/WEB-INF/include.jsp</include-prelude>
        </jsp-property-group>
    </jsp-config>

</web-app>